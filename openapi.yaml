openapi: 3.0.0
info:
  title: LXP API
  version: 1.0.0
  description: Learning Experience Platform API

servers:
  - url: http://localhost:3333
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: "user@example.com"
        fullName:
          type: string
          example: "John Doe"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        type:
          type: string
          example: "bearer"

    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                example: "Invalid credentials"

    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        instructorId:
          type: integer
          example: 1
        title:
          type: string
          example: "Introduction to Programming"
        caption:
          type: string
          example: "Learn the basics of programming"
        description:
          type: string
          example: "A comprehensive course covering programming fundamentals..."
        instructor:
          $ref: '#/components/schemas/Instructor'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Instructor:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedResponse:
      type: object
      properties:
        meta:
          type: object
          properties:
            total:
              type: integer
              example: 100
            per_page:
              type: integer
              example: 10
            current_page:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 10
            first_page:
              type: integer
              example: 1
            first_page_url:
              type: string
              example: "/?page=1"
            last_page_url:
              type: string
              example: "/?page=10"
            next_page_url:
              type: string
              nullable: true
              example: "/?page=2"
            previous_page_url:
              type: string
              nullable: true
            
paths:
  /users:
    get:
      summary: List all users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        200:
          description: List of users
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
    
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                fullName:
                  type: string
      responses:
        200:
          description: Created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: User ID
    
    get:
      summary: Get a user by ID
      responses:
        200:
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    
    put:
      summary: Update a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                fullName:
                  type: string
      responses:
        200:
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found
    
    delete:
      summary: Delete a user
      responses:
        200:
          description: Deleted user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: User not found

  /courses:
    get:
      summary: List all courses
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Items per page
      responses:
        200:
          description: List of courses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
    
    post:
      summary: Create a new course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - instructorId
                - title
                - caption
                - description
              properties:
                instructorId:
                  type: integer
                title:
                  type: string
                caption:
                  type: string
                description:
                  type: string
      responses:
        200:
          description: Created course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'

  /courses/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
        description: Course ID
    
    get:
      summary: Get a course by ID
      responses:
        200:
          description: Course found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        404:
          description: Course not found
    
    put:
      summary: Update a course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - instructorId
                - title
                - caption
                - description
              properties:
                instructorId:
                  type: integer
                title:
                  type: string
                caption:
                  type: string
                description:
                  type: string
      responses:
        200:
          description: Updated course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        404:
          description: Course not found
    
    delete:
      summary: Delete a course
      responses:
        200:
          description: Deleted course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        404:
          description: Course not found

  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  minLength: 8
                  example: "password123"
                fullName:
                  type: string
                  example: "John Doe"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        422:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      summary: Login user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        422:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/me:
    get:
      summary: Get authenticated user profile
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/logout:
    post:
      summary: Logout user
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        200:
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Logged out successfully"
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 